class PiMusic {
    constructor() {
        this.audioContext = null;
        this.isPlaying = false;
        this.currentIndex = 0;
        this.tempo = 200;
        this.timeoutId = null;
        this.masterVolume = 0.7; // Fixed default volume
        this.waveType = 'sine';
        this.isColorFlipped = false;
        this.digitCount = 0; // Debug counter for digits printed
        this.startTime = null; // Timer start time
        this.timerInterval = null; // Timer interval ID
        
        // Audio effect nodes
        this.masterGain = null;
        this.delayNode = null;
        this.delayGain = null;
        this.reverbNode = null;
        
        this.piDigits = "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938367586366677661732319020851017152832482939051718446927967067232445628737745454657395645681854969979926796541740265405060926498616169970835767697788969183754065532513157654824056701397688740439768994844905471306082818765322659378647023203768074070215688716006892919716213901966506764616901996862043439767016506007093354957050031738165132633654399764976935319827201607306729271476015932668260800313951970015959669423026064906004829406117321667162263088336688052966325663654423953495846966088970002765569106563885115769966067113655926936967089765825051156593161978130188073969639924670030899584509950853056899158516399915031728709157087930987175067734346065950073300866302124637156600969648767041090027885761529763008924428529103978779966659906244604982056854671720698033073380842267529325615405987925442969584244905063835076756915380968688616701863871582476088842176508002159568066653055675456016863988967623726965710166967938648962925024449938056928302901090440663700659443242965618064669746458027892842863600081978726230002893965473476926901139637449547007089854073651095370721062006336797041803061481433969444697695766749985844999879488892070090301935618628329067001688103398043088138871653068802344012649346847618935761721089915838421092169659062649434622879072853068688001736055633142877675649041923959088033649721651052584616734493938844779090851877297987146607568978607301736644550615066770695863036549476966226699698899949003881988015062088652675549893547071056639935676851068742046138062302509003026088016637092796063577950076336068802987076003064728076616084994700721041522080825032327068842346938892825926092051866883584996593647890816985915471066846481628946008023935644654064157264006636915693946736015717406536802265639851041617976983568058041816071506071395967919533854127077913046761142376994816334002503473297051161883633010671507046063802654568055851842065032012938831953879649508845761398473327686669103015906094831084993316473063080061799985398068863641522020851639065158449862669031987043893780999892159067395554715089830598169088655963073476825925900701031098838015844426275100015006072127968298157156965100073159344088802127693982536749654654089003962831651098449930056044903804037522468507301370816925838456646089004628709906013024830066637388618019046900009443540043007879073536516651468085883649967827138491842950906509968847094002851928709676821374901639103636081468008844693647825473344671536749633879058395584568014863671743693128988721935883632088344697648449265967027669879994264851728493863831652932767831537568843993439446015070651667113376133636077502932230936797536127829764669816516406316764946644044449804336779676580329651006652993893779966808485994686736829951244039398669796014949062097092829676721598932648436847473686002883012897600051316988952636306030023636804641262203060007026169949157127062398019456027151508568421046300017593984675016103624142088506926988395142115508950067502074096808669516651676647893781717151456127797001797041166491316823473085536637996068226050506456765080075003344797011032772062863127003444073976426023983043932686709900507896244066598738012866000012063039264949468070095062892074816508097951071127938162623946804063842926073925715037853026024659717244334043615547885885013932866026033039026709030098075970370506009058946879003430481830077606983993686883688962715050004058623325506456763959507006693436932547883065584863584015648040316951892039344624081027169020039076963026096297926159005799928949994962978027655816885509100061628992074040069625449395862926395900003159468715623985159866063439966648938925003522041436334026863966649869508032938439829946090043043088169015060659949756456007851426742005924648648802308994056030052462641772896370103044139406736002903426439982073949325058764080779306624297996877264879017854648055318854772663419039006584936926717779983026653853434862090715159949481636999845838905039675949127838087717710302346005745194397061263968866700468651096013097866077976985624728127593988651203924050806654924968953327267094431298329925632644903346074928721036056001999671901914436926978871062065641370962899962879996051976952993829503646984026968069027829647076547226892016159959663906395036999746851061993127026823965641063649468024103468041275903037142062720924068928485066041308064616926761761598745067966749043688736675698925863883065845726433959064641061639804892728669636871582476688426301688624923962648088012456950008806945071969449037008945067829993127866002828653577976976806842334635928639076997675433992302031705756007421900421159568068761808306628862031959436796032998806540896033159031537056397009853956734090095072097030726669893842671609002845002669766370302938647669701226516675695066449032871969648806901070669433827456671598644562439050851652096096851439903308077508736966738996146963994142648889043825065962816230690015027297825033804550953717066004827654717978506166932998527938877395012166007071842226346885670157097924799639058506616892945077503671959647127606799935568395628080825554854070084041686894827092663327008376002159649012649095203799671067636804831096997695651051928027863915036962298900952632651844987935831653106020106593048688577506600765063853845637829568654069127797663138989041951779473073344652449992847652316651020327013507866424346899398502506095816547607077765669825879058298879999715577203159866669705851623073862851073050999764721847700924900003717098024063065064316138074988893932802699879655982230094893015027983688068709765488636710628932095019063606016074397953965871652654906138127098055871663598952015847649012831797624879968827002005830688334709001994654903166675671098765638825698040853106073726024896924675906970701686076802772036952076398399080924002983077742950671080070632746346671959106618978398938329061827506516829063554695915015616087949830644128169998426639924008896797772866726399877616166103071074997624900039399424406062226816159436847709967761065998031829885648983628671976925062398899019949507507993399037350978953953549736998976449994698761988993896831844968226655976598046395949639395695509016068935965062779695598549142428742709883026593008176516779877536503862663996659654965953733026644764968851913951424949043433903066070095717816095020503951166055092073395577695095063092547056831935100044804830616628473893675089966946915829651100019946479766507636395968765654329936398965073073516958388924008950799693736264988142334736562419648316827999892709606885992765663076995066671063606728999897959644336007064098851871926005653946965346568001624986797900004641709996103992037473302203889756308081554449906690473647959847932616398139100040026851020830978728844097508050765036593781987032928923024996644698761936896064932593039690970106669949701142883269728346395012529851025399936063967424329827502073157903037988071896654306959032008831003675829127089507067421997005728275993932027598169481734988476016764938327046001980923536388649926568066766823644536928970021344925011901554969063686806936094866899005845547710925439639157632639879395325710959641056061901031070616006967639388635728522652509012633056997644808652015928421138853639692987926765653854709456117064906623127066623080000007397993537997967516717996996705815721325008847507077411399395644006439031077050002830081893967508593027421695982024306007062802899690997799734830949952847006027734717013649952863421325040726020804854651005952095765023081080999779397001965033715851804728036976060641879507830100080003715816959935648421081695012639029709998808893481468308012128031945009985797370086978060159901649721710002002715509623653938549004030058806779946046436728406066067618988796002097073077951036306830654726072806468068949695652103624663953468026244842928838669830628554698987749675327395635717928825999074088675008588055421066697473537577686556537097074473302883951847003020096052066885329089842654606098736395993659506698041651064568607169892829738815226925952721799993041892502473915936327439031203871996055398226871568628924654006607078051866092325395962816007871076816799815761968808096031065127698000045421052433700063726263529915013127636002077676090006406424996651618138081997507449077623508072844635264026999607421015946598019089159950987648030011616717169799066169779648507948906068945854959734985399067074329100005808799992325027549992075715100013969655863507893076549847468081804639799203854346088938503736106003635027641636024439925554764411726838635527080806060473969827946663264006648005764024084851641675996635096037113302862092862853065842507966462139104894509968500536779815113823346063056015052862963399628068949949901829013945761701100010128072736900926060101041641618935301159951007012938831964623946048652816329838968449616779899655388006623825327089506065901024956647998016993899950022226896994659106669883397329325072060969726509924936073967609726698009851439421074169549067009588879781978700508659609026030087008459624071265050969537009072302014073669936064623041226568935962090025830029951040093344888433306623001095726527066653041796996398411779995068468001866997046395892926005002033325554766036715166618871892395635892847879041967037903080016062506598316896926649877659806710507988503399030064066157967058269100951012096675644827893074698609026779397616862436926012020529068695609025701999806397636999015610070951653540203593568993736871919100002799488031077651962088297327999013655159507717701889648436096007093353653056953522142025796540992815651395766854554715507717421096950096994027649854000023370397994043669024945799892885951113081067885473737772436001593554966008065090901901701976063527969507090831962200796851797993096419593008052081043969095686066799006844802959334306203924066639700001651764203011097899297978952996925100779842066096963098726877709998999888002651799012299598473644051064879999814853024488969889862081659421953610963000968906066041632842488063632893600779889959849997300007851019395849653997529065993979346623009616096651226831063006536655103899020005659965027925633609648966654700026905036983700084905996006893969301022325166652976399024031071950022866897799946095862507096697726026938796924889669966966694688099851987050968062653654067879862692098950830999671080649050078697066765998103958031984064697950033697879779977655697103624094928862829676012979041698009919984958568962068847023014076509700800901948671299549169866991897536899041892103899915936088705985549900075652903659456994395647488016806692959609020086051306851988816549920987899046897827499885829298006779726989826023883507065032966761076698816781536041895103652064000011651825633879734641693019072862924854700803962066999799991655166099001644926002998628999017600959906798037509890988060002962736663675058488009945023046609976027692915098529639092963001632067690086099999092509449099940506952013968329669995199866936700930000000064646166806997693971900901993924606089969928700085399936766069397924300000002301906665500042073059306666666636635550015066969395005999981899888881008864860020036996600903330091129968990999998000099885999008086666999069639669992999000300080000068600699656666999669799983098938993000006099956666999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999";
        
        // Base note is C4
        this.baseFreq = 261.63;
        this.currentScale = 'major';
        this.globalPitch = 0;
        
        this.scales = {
            major: [0, 2, 4, 5, 7, 9, 11, 12],
            minor: [0, 2, 3, 5, 7, 8, 10, 12],
            pentatonic: [0, 2, 4, 7, 9, 12, 14, 16],
            blues: [0, 3, 5, 6, 7, 10, 12, 15],
            chromatic: [0, 1, 2, 3, 4, 5, 6, 7],
            wholetone: [0, 2, 4, 6, 8, 10, 12, 14]
        };
        
        this.updateNoteFrequencies();
        
        // Individual settings for digits 0 and 1 - updated to match prefs.json
        this.digit0Settings = {
            bgColor: '#000000',
            fgColor: '#ffffff',
            reverb: 20,
            delayMix: 66,
            delayTime: 250,
            delaySync: 'free',
            delayFeedback: 10,
            delayFilter: 4000,
            waveType: 'square'
        };
        
        this.digit1Settings = {
            bgColor: '#ffffff',
            fgColor: '#000000',
            reverb: 20,
            delayMix: 0,
            delayTime: 250,
            delaySync: 'free',
            delayFeedback: 10,
            delayFilter: 4000,
            waveType: 'sine'
        };
        
        // Current active settings for other digits (2-9)
        this.currentDigitSettings = this.digit0Settings; // Start with digit 0 settings
        
        this.init();
    }
    
    async init() {
        this.initElements();
        this.initEventListeners();
        this.displayPiDigits();
        await this.loadPreferences();
        await this.initAudioContext();
        
        // Auto-play immediately after user interaction
        this.startAutoplay();
    }
    
    async loadPreferences() {
        try {
            // Add cache-busting parameter to ensure fresh data
            const response = await fetch('./prefs.json?' + Date.now());
            if (!response.ok) {
                console.log('No prefs.json found, using defaults');
                return;
            }
            
            const prefs = await response.json();
            
            // Apply preferences to settings
            if (prefs.tempo) this.tempo = prefs.tempo;
            if (prefs.globalPitch !== undefined) this.globalPitch = prefs.globalPitch;
            if (prefs.currentScale) this.currentScale = prefs.currentScale;
            
            if (prefs.digit0Settings) {
                this.digit0Settings = { ...this.digit0Settings, ...prefs.digit0Settings };
            }
            
            if (prefs.digit1Settings) {
                this.digit1Settings = { ...this.digit1Settings, ...prefs.digit1Settings };
            }
            
            // Update UI to reflect loaded preferences
            this.updateUIFromSettings(prefs);
            
            console.log('Loaded preferences:', prefs);
            console.log('Applied values - tempo:', this.tempo, 'pitch:', this.globalPitch, 'scale:', this.currentScale);
        } catch (error) {
            console.log('Failed to load prefs.json, using defaults:', error);
        }
    }
    
    updateUIFromSettings(prefs) {
        // Update tempo
        const tempoSlider = document.getElementById('tempoSlider');
        const tempoValue = document.getElementById('tempoValue');
        if (tempoSlider && prefs.tempo) {
            console.log('Setting tempo slider to:', prefs.tempo);
            tempoSlider.value = prefs.tempo;
            if (tempoValue) tempoValue.textContent = `${prefs.tempo} BPM`;
        }
        
        // Update global pitch
        const pitchSlider = document.getElementById('globalPitch');
        const pitchValue = document.getElementById('globalPitchValue');
        if (pitchSlider && prefs.globalPitch !== undefined) {
            console.log('Setting pitch slider to:', prefs.globalPitch);
            pitchSlider.value = prefs.globalPitch;
            if (pitchValue) pitchValue.textContent = prefs.globalPitch;
        }
        
        // Update scale
        const scaleSelect = document.getElementById('scaleSelect');
        if (scaleSelect && prefs.currentScale) {
            console.log('Setting scale select to:', prefs.currentScale);
            scaleSelect.value = prefs.currentScale;
        }
        
        // Update digit 0 (kick) settings
        if (prefs.digit0Settings) {
            this.updateDigitUISettings('digit0', prefs.digit0Settings);
        }
        
        // Update digit 1 (hi-hat) settings
        if (prefs.digit1Settings) {
            this.updateDigitUISettings('digit1', prefs.digit1Settings);
        }
        
        // Update typography
        if (prefs.typography) {
            const digitSize = document.getElementById('digitSize');
            const digitSizeValue = document.getElementById('digitSizeValue');
            const lineHeight = document.getElementById('lineHeight');
            const lineHeightValue = document.getElementById('lineHeightValue');
            const letterSpacing = document.getElementById('letterSpacing');
            const letterSpacingValue = document.getElementById('letterSpacingValue');
            
            if (digitSize && prefs.typography.digitSize) {
                digitSize.value = prefs.typography.digitSize;
                if (digitSizeValue) digitSizeValue.textContent = `${prefs.typography.digitSize}vw`;
                this.updateDigitSize(prefs.typography.digitSize);
            }
            
            if (lineHeight && prefs.typography.lineHeight !== undefined) {
                lineHeight.value = prefs.typography.lineHeight;
                if (lineHeightValue) lineHeightValue.textContent = prefs.typography.lineHeight;
                this.updateLineHeight(prefs.typography.lineHeight);
            }
            
            if (letterSpacing && prefs.typography.letterSpacing !== undefined) {
                letterSpacing.value = prefs.typography.letterSpacing;
                if (letterSpacingValue) letterSpacingValue.textContent = `${prefs.typography.letterSpacing}em`;
                this.updateLetterSpacing(prefs.typography.letterSpacing);
            }
        }
        
        // Update note frequencies based on new scale/pitch
        this.updateNoteFrequencies();
    }
    
    updateDigitUISettings(digitPrefix, settings) {
        // Update all the sliders and values for this digit
        const elements = [
            'BgColor', 'FgColor', 'Reverb', 'DelayMix', 'DelaySync', 
            'DelayTime', 'DelayFeedback', 'DelayFilter', 'WaveType'
        ];
        
        elements.forEach(element => {
            const slider = document.getElementById(`${digitPrefix}${element}`);
            const valueSpan = document.getElementById(`${digitPrefix}${element}Value`);
            const settingKey = element.toLowerCase();
            
            if (slider && settings[settingKey] !== undefined) {
                slider.value = settings[settingKey];
                
                // Update the display value
                if (valueSpan) {
                    if (element === 'Reverb' || element === 'DelayMix' || element === 'DelayFeedback') {
                        valueSpan.textContent = `${settings[settingKey]}%`;
                    } else if (element === 'DelayTime') {
                        valueSpan.textContent = `${settings[settingKey]}ms`;
                    } else if (element === 'DelayFilter') {
                        valueSpan.textContent = `${settings[settingKey]}Hz`;
                    } else if (element === 'Pitch') {
                        valueSpan.textContent = settings[settingKey];
                    }
                }
            }
        });
    }

    startAutoplay() {
        // Start audio automatically without overlay
        this.initAudioContext().then(() => {
            this.play();
        });
    }
    
    initElements() {
        this.tempoSlider = document.getElementById('tempoSlider');
        this.tempoValue = document.getElementById('tempoValue');
        this.digits = document.getElementById('digits');
        this.recenterBtn = document.getElementById('recenterBtn');
        this.digitCounter = document.getElementById('digitCounter');
        this.timerElement = document.getElementById('timer');
        this.mobileMenuBtn = document.getElementById('mobileMenuBtn');
        this.mobilePlayBtn = document.getElementById('mobilePlayBtn');
        this.copySettingsBtn = document.getElementById('copySettingsBtn');
        this.lastDigitElement = null;
        
        // Control panel elements
        this.controlPanel = document.getElementById('controlPanel');
        this.initControlPanelElements();
    }
    
    initEventListeners() {
        this.tempoSlider.addEventListener('input', (e) => this.updateTempo(e.target.value));
        
        // Initialize audio context on any user interaction
        document.addEventListener('click', () => this.initAudioContext(), { once: true });
        document.addEventListener('keydown', () => this.initAudioContext(), { once: true });
        
        // Add keyboard listener for control panel toggle
        document.addEventListener('keydown', (e) => this.handleKeyPress(e));
        
        // Control panel event listeners
        this.initControlPanelListeners();
        
        // Recenter button
        this.recenterBtn.addEventListener('click', () => this.recenterToLatest());
        
        // Mobile buttons
        this.mobileMenuBtn.addEventListener('click', () => this.toggleControlPanel());
        this.mobilePlayBtn.addEventListener('click', () => this.togglePlayPause());
        
        // Copy settings button
        if (this.copySettingsBtn) {
            this.copySettingsBtn.addEventListener('click', () => this.copySettingsToClipboard());
        }
        
        // Show recenter button when user scrolls away
        window.addEventListener('scroll', () => this.checkScrollPosition());
    }
    
    async initAudioContext() {
        if (!this.audioContext) {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            if (this.audioContext.state === 'suspended') {
                await this.audioContext.resume();
            }
            this.setupAudioEffects();
        }
    }
    
    setupAudioEffects() {
        // Create master gain node
        this.masterGain = this.audioContext.createGain();
        this.masterGain.gain.setValueAtTime(this.masterVolume, this.audioContext.currentTime);
        
        // Create delay effect
        this.delayNode = this.audioContext.createDelay(1.0);
        this.delayGain = this.audioContext.createGain();
        this.delayGain.gain.setValueAtTime(0, this.audioContext.currentTime);
        this.delayNode.delayTime.setValueAtTime(0.3, this.audioContext.currentTime);
        
        // Create reverb using convolver
        this.reverbNode = this.audioContext.createConvolver();
        this.createReverbImpulse();
        
        // Simple routing: masterGain -> destination
        this.masterGain.connect(this.audioContext.destination);
    }
    
    createReverbImpulse() {
        const sampleRate = this.audioContext.sampleRate;
        const length = sampleRate * 2; // 2 second reverb
        const impulse = this.audioContext.createBuffer(2, length, sampleRate);
        
        for (let channel = 0; channel < 2; channel++) {
            const channelData = impulse.getChannelData(channel);
            for (let i = 0; i < length; i++) {
                const decay = Math.pow(1 - i / length, 2);
                channelData[i] = (Math.random() * 2 - 1) * decay;
            }
        }
        
        this.reverbNode.buffer = impulse;
    }
    
    displayPiDigits() {
        // Clear container - digits will appear as they're played
        this.digits.innerHTML = '';
    }
    
    updateTempo(value) {
        this.tempo = parseInt(value);
        this.tempoValue.textContent = `${this.tempo} BPM`;
        
        // Update synced delay times
        this.updateSyncedDelayTimes();
    }
    
    updateSyncedDelayTimes() {
        // Update digit 0 delay if synced
        if (this.digit0Settings.delaySync !== 'free') {
            const syncedTime = this.calculateSyncedDelayTime(this.digit0Settings.delaySync, this.tempo);
            if (syncedTime) {
                this.digit0Settings.delayTime = syncedTime;
                const timeSlider = document.getElementById('digit0DelayTime');
                const timeValue = document.getElementById('digit0DelayTimeValue');
                if (timeSlider) timeSlider.value = syncedTime;
                if (timeValue) timeValue.textContent = `${Math.round(syncedTime)}ms`;
            }
        }
        
        // Update digit 1 delay if synced
        if (this.digit1Settings.delaySync !== 'free') {
            const syncedTime = this.calculateSyncedDelayTime(this.digit1Settings.delaySync, this.tempo);
            if (syncedTime) {
                this.digit1Settings.delayTime = syncedTime;
                const timeSlider = document.getElementById('digit1DelayTime');
                const timeValue = document.getElementById('digit1DelayTimeValue');
                if (timeSlider) timeSlider.value = syncedTime;
                if (timeValue) timeValue.textContent = `${Math.round(syncedTime)}ms`;
            }
        }
    }
    
    updateNoteFrequencies() {
        this.noteFrequencies = {};
        const scale = this.scales[this.currentScale];
        
        // Map digits 2-9 to scale degrees
        for (let i = 2; i <= 9; i++) {
            const scaleIndex = (i - 2) % scale.length;
            const octave = Math.floor((i - 2) / scale.length);
            const semitones = scale[scaleIndex] + (octave * 12);
            this.noteFrequencies[i] = this.baseFreq * Math.pow(2, semitones / 12);
        }
    }
    
    updateGlobalPitch(value) {
        this.globalPitch = parseInt(value);
        const el = document.getElementById('globalPitchValue');
        if (el) el.textContent = value;
        this.updateNoteFrequencies();
    }
    
    updateScale(value) {
        this.currentScale = value;
        this.updateNoteFrequencies();
    }
    
    calculateSyncedDelayTime(syncValue, bpm) {
        if (syncValue === 'free') return null;
        
        const beatDuration = 60000 / bpm; // Quarter note duration in ms
        
        switch (syncValue) {
            case '1/1': return beatDuration * 4;     // Whole note
            case '1/2': return beatDuration * 2;     // Half note
            case '1/4': return beatDuration;         // Quarter note
            case '1/8': return beatDuration / 2;     // Eighth note
            case '1/16': return beatDuration / 4;    // Sixteenth note
            case '1/4T': return beatDuration * 2/3;  // Quarter triplet
            case '1/8T': return beatDuration / 3;    // Eighth triplet
            case '1/4D': return beatDuration * 1.5;  // Dotted quarter
            case '1/8D': return beatDuration * 0.75; // Dotted eighth
            default: return null;
        }
    }
    
    
    
    updateWaveType(value) {
        this.waveType = value;
    }
    
    
    updateDigitSize(value) {
        // Use VW units directly for responsive sizing
        // Range 3-12vw: 3vw ≈ 30+ chars/line, 12vw ≈ 8 chars/line, 6vw ≈ 17 chars/line
        const size = parseInt(value);
        
        document.getElementById('digitSizeValue').textContent = `${size}vw`;
        document.documentElement.style.setProperty('--digit-size', `${size}vw`);
    }
    
    updateLineHeight(value) {
        document.getElementById('lineHeightValue').textContent = value;
        document.documentElement.style.setProperty('--line-height', value);
    }
    
    updateLetterSpacing(value) {
        document.getElementById('letterSpacingValue').textContent = `${value}em`;
        document.documentElement.style.setProperty('--letter-spacing', `${value}em`);
    }
    
    // Digit 0 update methods
    updateDigit0BgColor(value) {
        this.digit0Settings.bgColor = value;
    }
    
    updateDigit0FgColor(value) {
        this.digit0Settings.fgColor = value;
    }
    
    updateDigit0Reverb(value) {
        this.digit0Settings.reverb = parseInt(value);
        document.getElementById('digit0ReverbValue').textContent = `${value}%`;
    }
    
    updateDigit0DelayMix(value) {
        this.digit0Settings.delayMix = parseInt(value);
        document.getElementById('digit0DelayMixValue').textContent = `${value}%`;
    }
    
    updateDigit0DelayTime(value) {
        this.digit0Settings.delayTime = parseInt(value);
        document.getElementById('digit0DelayTimeValue').textContent = `${value}ms`;
    }
    
    updateDigit0DelaySync(value) {
        this.digit0Settings.delaySync = value;
        
        // Update delay time if synced
        if (value !== 'free') {
            const syncedTime = this.calculateSyncedDelayTime(value, this.tempo);
            if (syncedTime) {
                this.digit0Settings.delayTime = syncedTime;
                const timeSlider = document.getElementById('digit0DelayTime');
                const timeValue = document.getElementById('digit0DelayTimeValue');
                if (timeSlider) timeSlider.value = syncedTime;
                if (timeValue) timeValue.textContent = `${Math.round(syncedTime)}ms`;
            }
        }
    }
    
    updateDigit0DelayFeedback(value) {
        this.digit0Settings.delayFeedback = parseInt(value);
        document.getElementById('digit0DelayFeedbackValue').textContent = `${value}%`;
    }
    
    updateDigit0DelayFilter(value) {
        this.digit0Settings.delayFilter = parseInt(value);
        document.getElementById('digit0DelayFilterValue').textContent = `${value}Hz`;
    }
    
    updateDigit0WaveType(value) {
        this.digit0Settings.waveType = value;
    }
    
    // Digit 1 update methods
    updateDigit1BgColor(value) {
        this.digit1Settings.bgColor = value;
    }
    
    updateDigit1FgColor(value) {
        this.digit1Settings.fgColor = value;
    }
    
    updateDigit1Reverb(value) {
        this.digit1Settings.reverb = parseInt(value);
        document.getElementById('digit1ReverbValue').textContent = `${value}%`;
    }
    
    updateDigit1DelayMix(value) {
        this.digit1Settings.delayMix = parseInt(value);
        document.getElementById('digit1DelayMixValue').textContent = `${value}%`;
    }
    
    updateDigit1DelayTime(value) {
        this.digit1Settings.delayTime = parseInt(value);
        document.getElementById('digit1DelayTimeValue').textContent = `${value}ms`;
    }
    
    updateDigit1DelaySync(value) {
        this.digit1Settings.delaySync = value;
        
        // Update delay time if synced
        if (value !== 'free') {
            const syncedTime = this.calculateSyncedDelayTime(value, this.tempo);
            if (syncedTime) {
                this.digit1Settings.delayTime = syncedTime;
                const timeSlider = document.getElementById('digit1DelayTime');
                const timeValue = document.getElementById('digit1DelayTimeValue');
                if (timeSlider) timeSlider.value = syncedTime;
                if (timeValue) timeValue.textContent = `${Math.round(syncedTime)}ms`;
            }
        }
    }
    
    updateDigit1DelayFeedback(value) {
        this.digit1Settings.delayFeedback = parseInt(value);
        document.getElementById('digit1DelayFeedbackValue').textContent = `${value}%`;
    }
    
    updateDigit1DelayFilter(value) {
        this.digit1Settings.delayFilter = parseInt(value);
        document.getElementById('digit1DelayFilterValue').textContent = `${value}Hz`;
    }
    
    updateDigit1WaveType(value) {
        this.digit1Settings.waveType = value;
    }
    
    togglePlayPause() {
        if (this.isPlaying) {
            this.pause();
        } else {
            this.play();
        }
    }
    
    async play() {
        if (this.isPlaying) return; // Prevent multiple play calls
        
        if (!this.audioContext) {
            await this.initAudioContext();
        }
        
        // Ensure audio context is resumed
        if (this.audioContext.state === 'suspended') {
            await this.audioContext.resume();
        }
        
        this.isPlaying = true;
        if (this.mobilePlayBtn) this.mobilePlayBtn.classList.add('playing');
        
        // Start timer
        this.startTimer();
        
        this.playNextDigit();
    }
    
    pause() {
        this.isPlaying = false;
        if (this.mobilePlayBtn) this.mobilePlayBtn.classList.remove('playing');
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
        }
        
        // Stop timer
        this.stopTimer();
    }
    
    stop() {
        this.pause();
        this.currentIndex = 0;
        this.digits.innerHTML = '';
        this.digitCount = 0; // Reset counter
        if (this.digitCounter) {
            this.digitCounter.textContent = '0';
        }
        // Reset timer
        this.resetTimer();
    }
    
    playNextDigit() {
        if (!this.isPlaying || this.currentIndex >= this.piDigits.length) {
            this.stop();
            return;
        }
        
        // Clear any existing timeout to prevent overlap
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
        }
        
        const digit = this.piDigits[this.currentIndex];
        this.addDigitToDisplay(digit, this.currentIndex);
        this.playSound(digit);
        
        // Update digit counter
        this.digitCount++;
        if (this.digitCounter) {
            this.digitCounter.textContent = this.digitCount.toString();
        } else {
            console.warn('digitCounter element not found');
        }
        
        this.currentIndex++;
        
        const interval = (60000 / this.tempo); // 60000ms per minute / BPM = ms per beat
        this.timeoutId = setTimeout(() => this.playNextDigit(), interval);
    }
    
    addDigitToDisplay(digit, index) {
        // Handle mode switching for 0 and 1
        if (digit === '0') {
            this.currentDigitSettings = this.digit0Settings;
            this.applyDigitColors(this.digit0Settings);
        } else if (digit === '1') {
            this.currentDigitSettings = this.digit1Settings;
            this.applyDigitColors(this.digit1Settings);
        }
        
        // Create new digit element
        const digitElement = document.createElement('span');
        digitElement.className = 'digit current';
        digitElement.textContent = digit;
        digitElement.dataset.index = index;
        
        // Add to container
        this.digits.appendChild(digitElement);
        
        // Animate in
        setTimeout(() => {
            digitElement.classList.add('visible');
        }, 50);
        
        // Remove current highlight after a moment
        setTimeout(() => {
            digitElement.classList.remove('current');
        }, 300);
        
        // Store reference to latest digit
        this.lastDigitElement = digitElement;
        
        // Auto-scroll to latest digit
        digitElement.scrollIntoView({ behavior: 'smooth', block: 'end' });
    }
    
    applyDigitColors(digitSettings) {
        document.body.style.backgroundColor = digitSettings.bgColor;
        document.documentElement.style.setProperty('--text-color', digitSettings.fgColor);
    }
    
    flipColors() {
        this.isColorFlipped = !this.isColorFlipped;
        const body = document.body;
        if (this.isColorFlipped) {
            body.style.backgroundColor = '#ffffff';
            body.style.color = '#000000';
            document.documentElement.style.setProperty('--text-color', '#000000');
        } else {
            body.style.backgroundColor = '#000000';
            body.style.color = '#ffffff';
            document.documentElement.style.setProperty('--text-color', '#ffffff');
        }
    }
    
    playSound(digit) {
        if (!this.audioContext) return;
        
        if (digit === '0') {
            this.playKickDrum();
        } else if (digit === '1') {
            this.playHiHat();
        } else {
            const frequency = this.noteFrequencies[digit];
            if (frequency) {
                // Apply global pitch to the frequency
                const pitchRatio = Math.pow(2, this.globalPitch / 12);
                const adjustedFreq = frequency * pitchRatio;
                // Use current active settings for digits 2-9
                this.playTone(adjustedFreq, this.currentDigitSettings.waveType, this.currentDigitSettings);
            }
        }
    }
    
    playTone(frequency, waveType = this.waveType, settings = null) {
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        
        oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);
        oscillator.type = waveType;
        
        oscillator.connect(gainNode);
        
        // Apply effects using the same chain as kick/hihat
        this.applyEffectsChain(gainNode, settings);
        
        gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.3, this.audioContext.currentTime + 0.01);
        gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + 0.5);
        
        oscillator.start(this.audioContext.currentTime);
        oscillator.stop(this.audioContext.currentTime + 0.5);
    }
    
    playKickDrum() {
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        
        // Apply global pitch
        const pitchRatio = Math.pow(2, this.globalPitch / 12);
        const baseFreq = 60; // Low kick frequency
        const adjustedFreq = baseFreq * pitchRatio;
        
        oscillator.connect(gainNode);
        
        // Apply effects with digit0Settings
        this.applyEffectsChain(gainNode, this.digit0Settings);
        
        // Create kick drum sound: low frequency that drops quickly
        oscillator.frequency.setValueAtTime(adjustedFreq, this.audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(0.1, this.audioContext.currentTime + 0.1);
        oscillator.type = this.digit0Settings.waveType;
        
        gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.8, this.audioContext.currentTime + 0.01);
        gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + 0.3);
        
        oscillator.start(this.audioContext.currentTime);
        oscillator.stop(this.audioContext.currentTime + 0.3);
    }
    
    playHiHat() {
        // Create noise buffer for hi-hat
        const bufferSize = this.audioContext.sampleRate * 0.1;
        const buffer = this.audioContext.createBuffer(1, bufferSize, this.audioContext.sampleRate);
        const output = buffer.getChannelData(0);
        
        // Generate white noise
        for (let i = 0; i < bufferSize; i++) {
            output[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / bufferSize, 2);
        }
        
        const source = this.audioContext.createBufferSource();
        const gainNode = this.audioContext.createGain();
        const filter = this.audioContext.createBiquadFilter();
        
        source.buffer = buffer;
        
        // Apply global pitch (affects filter frequency)
        const pitchRatio = Math.pow(2, this.globalPitch / 12);
        const filterFreq = 8000 * pitchRatio;
        
        filter.type = 'highpass';
        filter.frequency.setValueAtTime(filterFreq, this.audioContext.currentTime);
        
        source.connect(filter);
        filter.connect(gainNode);
        
        // Apply effects with digit1Settings
        this.applyEffectsChain(gainNode, this.digit1Settings);
        
        gainNode.gain.setValueAtTime(0.4, this.audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + 0.1);
        
        source.start(this.audioContext.currentTime);
    }
    
    applyEffectsChain(sourceNode, settings) {
        if (!settings || (settings.reverb === 0 && settings.delayMix === 0)) {
            sourceNode.connect(this.masterGain);
            return;
        }
        
        const dryGain = this.audioContext.createGain();
        
        sourceNode.connect(dryGain);
        
        // Simple, safe delay implementation
        if (settings.delayMix > 0) {
            const delay = this.audioContext.createDelay(2.0);
            const feedback = this.audioContext.createGain();
            const filter = this.audioContext.createBiquadFilter();
            const delayWetGain = this.audioContext.createGain();
            const inputGain = this.audioContext.createGain();
            
            // Set conservative levels to prevent clipping
            delay.delayTime.setValueAtTime(settings.delayTime / 1000, this.audioContext.currentTime);
            feedback.gain.setValueAtTime(Math.min(settings.delayFeedback / 100, 0.4), this.audioContext.currentTime); // Cap at 40%
            delayWetGain.gain.setValueAtTime(settings.delayMix / 100 * 0.3, this.audioContext.currentTime); // Reduce wet signal
            inputGain.gain.setValueAtTime(0.5, this.audioContext.currentTime); // Reduce input to delay
            
            // Configure filter
            filter.type = 'lowpass';
            filter.frequency.setValueAtTime(settings.delayFilter, this.audioContext.currentTime);
            filter.Q.setValueAtTime(0.7, this.audioContext.currentTime);
            
            // Safe delay routing
            sourceNode.connect(inputGain);
            inputGain.connect(delay);
            delay.connect(filter);
            filter.connect(delayWetGain);
            filter.connect(feedback);
            feedback.connect(delay); // Feedback loop
            delayWetGain.connect(this.masterGain);
        }
        
        // Apply reverb
        if (settings.reverb > 0) {
            const reverbWetGain = this.audioContext.createGain();
            reverbWetGain.gain.setValueAtTime((settings.reverb / 100) * 0.05, this.audioContext.currentTime); // Much quieter reverb
            sourceNode.connect(reverbWetGain);
            reverbWetGain.connect(this.reverbNode);
            this.reverbNode.connect(this.masterGain);
        }
        
        // Dry signal with reduced level when effects are active
        const dryLevel = settings.delayMix > 0 || settings.reverb > 0 ? 0.7 : 1.0;
        dryGain.gain.setValueAtTime(dryLevel, this.audioContext.currentTime);
        dryGain.connect(this.masterGain);
    }
    
    
    handleKeyPress(e) {
        if (e.key === ' ') {
            e.preventDefault(); // Prevent page scroll
            this.togglePlayPause();
        } else if (e.key === 'p' || e.key === 'P') {
            e.preventDefault();
            this.toggleControlPanel();
        }
    }
    
    initControlPanelElements() {
        // Tab buttons
        this.tabButtons = document.querySelectorAll('.tab-btn');
        this.tabPanels = document.querySelectorAll('.tab-panel');
    }
    
    initControlPanelListeners() {
        // Tab switching
        this.tabButtons.forEach(btn => {
            btn.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));
        });
        
        // General controls
        const globalPitch = document.getElementById('globalPitch');
        const scaleSelect = document.getElementById('scaleSelect');
        
        if (globalPitch) globalPitch.addEventListener('input', (e) => this.updateGlobalPitch(e.target.value));
        if (scaleSelect) scaleSelect.addEventListener('change', (e) => this.updateScale(e.target.value));
        
        // Typography controls
        const digitSize = document.getElementById('digitSize');
        const lineHeight = document.getElementById('lineHeight');
        const letterSpacing = document.getElementById('letterSpacing');
        
        if (digitSize) digitSize.addEventListener('input', (e) => this.updateDigitSize(e.target.value));
        if (lineHeight) lineHeight.addEventListener('input', (e) => this.updateLineHeight(e.target.value));
        if (letterSpacing) letterSpacing.addEventListener('input', (e) => this.updateLetterSpacing(e.target.value));
        
        // Digit 0 (Kick) listeners
        const digit0BgColor = document.getElementById('digit0BgColor');
        const digit0FgColor = document.getElementById('digit0FgColor');
        const digit0Reverb = document.getElementById('digit0Reverb');
        const digit0DelayMix = document.getElementById('digit0DelayMix');
        const digit0DelaySync = document.getElementById('digit0DelaySync');
        const digit0DelayTime = document.getElementById('digit0DelayTime');
        const digit0DelayFeedback = document.getElementById('digit0DelayFeedback');
        const digit0DelayFilter = document.getElementById('digit0DelayFilter');
        const digit0WaveType = document.getElementById('digit0WaveType');
        
        if (digit0BgColor) digit0BgColor.addEventListener('input', (e) => this.updateDigit0BgColor(e.target.value));
        if (digit0FgColor) digit0FgColor.addEventListener('input', (e) => this.updateDigit0FgColor(e.target.value));
        if (digit0Reverb) digit0Reverb.addEventListener('input', (e) => this.updateDigit0Reverb(e.target.value));
        if (digit0DelayMix) digit0DelayMix.addEventListener('input', (e) => this.updateDigit0DelayMix(e.target.value));
        if (digit0DelaySync) digit0DelaySync.addEventListener('change', (e) => this.updateDigit0DelaySync(e.target.value));
        if (digit0DelayTime) digit0DelayTime.addEventListener('input', (e) => this.updateDigit0DelayTime(e.target.value));
        if (digit0DelayFeedback) digit0DelayFeedback.addEventListener('input', (e) => this.updateDigit0DelayFeedback(e.target.value));
        if (digit0DelayFilter) digit0DelayFilter.addEventListener('input', (e) => this.updateDigit0DelayFilter(e.target.value));
        if (digit0WaveType) digit0WaveType.addEventListener('change', (e) => this.updateDigit0WaveType(e.target.value));
        
        // Digit 1 (Hi-Hat) listeners
        const digit1BgColor = document.getElementById('digit1BgColor');
        const digit1FgColor = document.getElementById('digit1FgColor');
        const digit1Reverb = document.getElementById('digit1Reverb');
        const digit1DelayMix = document.getElementById('digit1DelayMix');
        const digit1DelaySync = document.getElementById('digit1DelaySync');
        const digit1DelayTime = document.getElementById('digit1DelayTime');
        const digit1DelayFeedback = document.getElementById('digit1DelayFeedback');
        const digit1DelayFilter = document.getElementById('digit1DelayFilter');
        const digit1WaveType = document.getElementById('digit1WaveType');
        
        if (digit1BgColor) digit1BgColor.addEventListener('input', (e) => this.updateDigit1BgColor(e.target.value));
        if (digit1FgColor) digit1FgColor.addEventListener('input', (e) => this.updateDigit1FgColor(e.target.value));
        if (digit1Reverb) digit1Reverb.addEventListener('input', (e) => this.updateDigit1Reverb(e.target.value));
        if (digit1DelayMix) digit1DelayMix.addEventListener('input', (e) => this.updateDigit1DelayMix(e.target.value));
        if (digit1DelaySync) digit1DelaySync.addEventListener('change', (e) => this.updateDigit1DelaySync(e.target.value));
        if (digit1DelayTime) digit1DelayTime.addEventListener('input', (e) => this.updateDigit1DelayTime(e.target.value));
        if (digit1DelayFeedback) digit1DelayFeedback.addEventListener('input', (e) => this.updateDigit1DelayFeedback(e.target.value));
        if (digit1DelayFilter) digit1DelayFilter.addEventListener('input', (e) => this.updateDigit1DelayFilter(e.target.value));
        if (digit1WaveType) digit1WaveType.addEventListener('change', (e) => this.updateDigit1WaveType(e.target.value));
    }
    
    switchTab(tabName) {
        // Remove active class from all tabs and panels
        this.tabButtons.forEach(btn => btn.classList.remove('active'));
        this.tabPanels.forEach(panel => panel.classList.remove('active'));
        
        // Add active class to selected tab and panel
        const tabBtn = document.querySelector(`[data-tab="${tabName}"]`);
        const tabPanel = document.getElementById(`${tabName}-tab`);
        
        if (tabBtn) tabBtn.classList.add('active');
        if (tabPanel) tabPanel.classList.add('active');
    }
    
    recenterToLatest() {
        if (this.lastDigitElement) {
            this.lastDigitElement.scrollIntoView({ behavior: 'smooth', block: 'end' });
            this.recenterBtn.style.display = 'none';
        }
    }
    
    checkScrollPosition() {
        if (this.lastDigitElement) {
            const rect = this.lastDigitElement.getBoundingClientRect();
            const isVisible = rect.bottom >= 0 && rect.bottom <= window.innerHeight;
            
            if (!isVisible && this.isPlaying) {
                this.recenterBtn.style.display = 'block';
            } else {
                this.recenterBtn.style.display = 'none';
            }
        }
    }
    
    toggleControlPanel() {
        const panel = this.controlPanel;
        const mobileBtn = this.mobileMenuBtn;
        
        if (panel.style.display === 'none' || !panel.style.display) {
            panel.style.display = 'block';
            // Force reflow to ensure the display change takes effect
            panel.offsetHeight;
            panel.classList.add('show');
            if (mobileBtn) mobileBtn.classList.add('active');
        } else {
            panel.classList.remove('show');
            if (mobileBtn) mobileBtn.classList.remove('active');
            setTimeout(() => {
                panel.style.display = 'none';
            }, 300);
        }
    }
    
    startTimer() {
        this.startTime = Date.now();
        this.updateTimer();
        this.timerInterval = setInterval(() => this.updateTimer(), 100);
    }
    
    stopTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }
    
    resetTimer() {
        this.stopTimer();
        this.startTime = null;
        if (this.timerElement) {
            this.timerElement.textContent = '0s';
        }
    }
    
    updateTimer() {
        if (!this.startTime || !this.timerElement) return;
        const elapsed = Math.floor((Date.now() - this.startTime) / 1000);
        this.timerElement.textContent = `${elapsed}s`;
    }
    
    copySettingsToClipboard() {
        // Get current typography settings from elements
        const digitSizeEl = document.getElementById('digitSize');
        const lineHeightEl = document.getElementById('lineHeight');
        const letterSpacingEl = document.getElementById('letterSpacing');
        
        const settings = {
            tempo: this.tempo,
            globalPitch: this.globalPitch,
            currentScale: this.currentScale,
            digit0Settings: { ...this.digit0Settings },
            digit1Settings: { ...this.digit1Settings },
            typography: {
                digitSize: digitSizeEl ? parseInt(digitSizeEl.value) : 6,
                lineHeight: lineHeightEl ? parseFloat(lineHeightEl.value) : 0.75,
                letterSpacing: letterSpacingEl ? parseFloat(letterSpacingEl.value) : -0.025
            }
        };
        
        const json = JSON.stringify(settings, null, 2);
        
        // Copy to clipboard
        navigator.clipboard.writeText(json).then(() => {
            // Visual feedback
            const originalText = this.copySettingsBtn.textContent;
            this.copySettingsBtn.textContent = 'Copied!';
            this.copySettingsBtn.style.background = '#28a745';
            
            setTimeout(() => {
                this.copySettingsBtn.textContent = originalText;
                this.copySettingsBtn.style.background = '';
            }, 2000);
        }).catch(err => {
            console.error('Failed to copy settings:', err);
            alert('Failed to copy to clipboard. Check console for JSON.');
            console.log('Settings JSON:', json);
        });
    }
}

// Initialize the application when the page loads
document.addEventListener('DOMContentLoaded', () => {
    new PiMusic();
});